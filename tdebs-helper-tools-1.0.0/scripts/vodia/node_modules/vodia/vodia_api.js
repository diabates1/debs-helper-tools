/*******************************************************************************
 * Redmine API manager.
 * Inspired by: https://github.com/zanran/node-redmine/blob/master/lib/redmine.js
 * Using      : http://www.redmine.org/projects/redmine/wiki/Rest_Versions
 ******************************************************************************/

"use strict";

var fs            = require('fs')                               ;
var https         = require('https')                            ;
var http          = require('http' )                            ;
var tools         = require('node_ebs_libs/tools/tools')        ;
var msg           = require('node_ebs_libs/tools/msg')          ;
var credentials   = require('node_ebs_libs/tools/credentials')  ;
var rest          = require('node_ebs_libs/net/rest')           ;
var stat          = require('node_ebs_libs/tools/status')       ;
var crypto        = require('crypto')                           ;

function Vodia (configFile) {

  if (!(tools.isDefined(configFile))      ||
      !(typeof configFile === 'string')   ) {
    throw stat.error("Unvalid configuration", "Configuration is undefined", configFile);
  }

  this.configuration = JSON.parse(fs.readFileSync(configFile, 'utf8'));

  /**************************************************************************** 
   * Load Vodia credentials.                                                    
   ***************************************************************************/ 
  this.rootPath        = process.env[this.configuration['env']];
  this.credentialsFile = this.rootPath + "/" + this.configuration.credential['file'];
  if (!tools.fileExists(this.credentialsFile )) {
    throw stat.error("File not found",
                     "Unable to find credentials'file <" + credentialsFile + ">",
                     credentialsFile);
  }
  this.credentialMngr = credentials.getInstance()        ;
  this.credentialMngr.initDatabase(this.credentialsFile)      ;
  this.credential     = this.credentialMngr.getByName(this.configuration.credential['key']) ;

  /**************************************************************************** 
   * Credentials will provides session id after login.
   ***************************************************************************/
  this.session_id = undefined;

  /**************************************************************************** 
   * Default HTTP(S) service, headers and options.
   ***************************************************************************/
  this.service     = (this.configuration['protocol'] == 'http' ? http : https);
  this.def_headers = {
                       'Content-Type'    : 'application/' + this.configuration['format'] + "; charset=utf-8",
                       'Accept'          : 'application/' + this.configuration['format'],
                       'Accept-Language' : 'en-GB,en;q=0.5',
                     };
  this.options     = {
                       'host'    : this.configuration['host']            ,
                       'port'    : this.configuration['port']            ,
                       'headers' : this.def_headers                      ,
                       'rejectUnauthorized' : false
                     };
  this.rootURL     = '/' + this.configuration.api['prefix'];
}

Vodia.prototype.request = function(method, path, params) {

  /**************************************************************************** 
   * Fine tune options given request inputs.
   ***************************************************************************/
  this.options['path']   = this.rootURL + path + (method === 'GET' ? ("?" + params) : "");
  this.options['method'] = method;
  if (tools.isDefined(params)) {
    if (method === 'GET') {
      this.options['qs'] = params;
    }
    else {
      delete this.options['qs'];
    }
    if (method === 'PUT' || method === 'POST') {
      this.options['body'] = params;
    }
    else{
      delete this.options['body'];
    }
  }

  if (tools.isDefined(this.session_id)) {
    this.options.headers["Cookie"] = "session=" + this.session_id;
  }
  else {
    if(tools.isDefined(this.options.headers["Cookie"]))
      delete this.options.headers["Cookie"];
  }

  return rest.sendPromised(this.service, this.options, params);
}

/****************************************************************************** 
 * Login to Vodia.
 *****************************************************************************/
Vodia.prototype.login = function() {

  if (tools.isDefined(this.session_id)) {
    msg.info("Already logged in, leave.");
    return 1;
  }

  var hash  = crypto.createHash('md5').update(this.credential["passwd"].value).digest('hex');

  /************************************************************************** 
   * Build login object to be sent to API.
   *************************************************************************/
  var login = {
                "name"  : "auth"  ,
                "value" : this.credential["user"] + (this.credential["passwd"].value != "" ? (" " + hash) : "")
              };

  /************************************************************************** 
   * Note the opbject length.
   *************************************************************************/
  this.options.headers                   = this.def_headers;
  this.options.headers['Content-Length'] = Buffer.byteLength(JSON.stringify(login));

  var _this = this;

  function do_login (resolve, reject) {

    /************************************************************************** 
     * Send the request, reply will be session id.
     *************************************************************************/
    _this.request('PUT' ,
                 'rest/system/session',
                 JSON.stringify(login))
      .then( function (reply){
        if (reply == "false") {
          msg.error("Unable to login, leave.", error);
          reject(reply);
        }
        msg.debug("Received session id <" + reply + ">");
        resolve(reply);
      })
      .catch( function (error) {
        msg.error("Unable to login, leave.", error);
        reject(error);
      })
    return 0;
  }
  return new Promise(do_login);
}

Vodia.prototype.setSession = function( sessionId ) {
  this.session_id = sessionId;
  msg.debug("Session is set to <" + this.session_id + ">.");
}

Vodia.prototype.extensionGet = function( domain, ext ) {

  if (!tools.isDefined(this.session_id)){
    throw stat.error("Session is undefined, please login first, leave.");
  }

/*
  if (typeof ext !== 'number') {
    throw stat.error("Invalid extention format', 'Extension must be an integer, leave.", ext);
  }
*/

  /************************************************************************** 
   * Note the opbject length.
   *************************************************************************/
  this.options.headers  = this.def_headers   ;
  this.options.headers['Content-Length'] = 0 ; 

  return this.request('GET',
                      'rest/domain/' + domain + '/user_settings/' + ext,
                      undefined);
}

Vodia.prototype.extensionCreate = function( domain, ext ) {

  if (!tools.isDefined(this.session_id)){
    throw stat.error("Session is undefined, please login first, leave.");
  }

/*
  if (typeof ext !== 'number') {
    throw stat.error("Invalid extention format', 'Extension must be an integer, leave.", ext);
  }
*/

  var extension = {
                    'type'        : 'extensions'   ,
                    'account_ext' : ext            ,
                    'first_name'  : ext            ,
                    'last_name'   : ext            ,
                  };
  /************************************************************************** 
   * Note the opbject length.
   *************************************************************************/
  this.options.headers = this.def_headers ;
  this.options.headers['Content-Length'] = Buffer.byteLength(JSON.stringify(extension));

  return this.request('PUT',
                      'rest/domain/' + domain + '/addacc/' + ext,
                      JSON.stringify(extension));
}

Vodia.prototype.shell = function( cmd ) {

  if (!tools.isDefined(this.session_id)){
    throw stat.error("Session is undefined, please login first, leave.");
  }

  /************************************************************************** 
   * Note the opbject length.
   *************************************************************************/
  this.options.headers                   = this.def_headers ;
  delete this.options.qs;
  delete this.options.body;
  this.options.headers['Content-Type']   = "application/x-www-form-urlencoded; charset=UTF-8"
  this.options.headers['Content-Length'] = cmd.length;
  this.options.headers['Connection'] = 'keep-alive';
  this.options.headers['Accept'] = '*/*';
  this.options.headers['Pragma'] = 'no-cache';
  this.options.headers['Cache-Control'] = 'no-cache';
  this.options.headers['X-Requested-With'] =  'XMLHttpRequest';
  this.options.headers['Referer'] = 'http://192.168.1.1/reg_domains.htm';
  return this.request('POST',
                      'rest/cgi/bash',
                      cmd);
}


module.exports = Vodia;
